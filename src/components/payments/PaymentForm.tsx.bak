'use client';

import { useState, useEffect, useRef } from 'react';
import { CreditCard, Shield, Check } from 'lucide-react';

interface SubscriptionResult {
  success: boolean;
  subscriptionId: string;
  status: string;
  planId: string;
  planName: string;
  message: string;
}

interface SquareError {
  message?: string;
}

interface PaymentFormProps {
  planId: string;
  planName: string;
  price: string;
  onSuccess: (result: SubscriptionResult) => void;
  onError: (error: string) => void;
}


interface SquareCard {
  attach: (selector: string) => Promise<void>;
  tokenize: () => Promise<{ token?: string; errors?: SquareError[] }>;
}

interface Square {
  payments: (appId: string, locationId: string) => {
    card: () => SquareCard;
  };
}

declare global {
  interface Window {
    Square?: Square;
  }
}

export default function PaymentForm({ 
  planId, 
  planName, 
  price, 
  onSuccess, 
  onError 
}: PaymentFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isSquareLoaded, setIsSquareLoaded] = useState(false);
  const [card, setCard] = useState<SquareCard | null>(null);
  const cardContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const loadSquare = async () => {
      // Wait longer to ensure DOM is fully rendered
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('üìã Checking if PaymentForm DOM is ready...');
      console.log('Document ready state:', document.readyState);
      console.log('Card container exists:', !!document.getElementById('card-container'));
      console.log('Card ref exists:', !!cardContainerRef.current);
      
      if (window.Square) {
        setTimeout(() => initializeSquare(), 200);
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://sandbox.web.squarecdn.com/v1/square.js'; // Use production URL for production
      script.async = true;
      script.onload = () => {
        if (window.Square) {
          // Wait even longer after script loads to ensure DOM is ready
          setTimeout(() => initializeSquare(), 500);
        }
      };
      script.onerror = () => {
        onError('Failed to load Square payment form');
      };
      document.head.appendChild(script);
    };

    const initializeSquare = async () => {
      try {
        // Wait a bit for DOM to be ready
        await new Promise(resolve => setTimeout(resolve, 200));
        
        console.log('üîç Debugging Square initialization...');
        console.log('window.Square available:', !!window.Square);
        console.log('window.Square object:', window.Square);
        
        if (!window.Square) {
          throw new Error('Square SDK not loaded');
        }
        
        const appId = process.env.NEXT_PUBLIC_SQUARE_APP_ID;
        const locationId = process.env.NEXT_PUBLIC_SQUARE_LOCATION_ID;
        
        console.log('Environment check:', { 
          appId: appId ? 'present' : 'missing', 
          locationId: locationId ? 'present' : 'missing' 
        });
        
        if (!appId || !locationId) {
          throw new Error('Square configuration missing: appId or locationId not found');
        }
        
        console.log('Calling window.Square.payments with:', { appId, locationId });
        
        // Initialize Square Payments
        let payments;
        try {
          payments = window.Square.payments(appId, locationId);
          console.log('Payments instance created:', payments);
          console.log('Payments methods available:', Object.keys(payments || {}));
        } catch (paymentsError) {
          console.error('Error creating payments instance:', paymentsError);
          throw new Error(`Failed to create payments instance: ${paymentsError}`);
        }
        
        if (!payments) {
          throw new Error('Payments instance is null or undefined');
        }
        
        // Check if payments.card method exists
        if (typeof payments.card !== 'function') {
          console.error('payments.card is not a function. Available methods:', Object.keys(payments));
          throw new Error('payments.card method not available');
        }
        
        // Wait for card container to be available via multiple methods
        let cardContainer = null;
        let attempts = 0;
        const maxAttempts = 20; // Wait up to 2 seconds
        
        console.log('üîç Starting card container search...');
        console.log('cardContainerRef.current:', cardContainerRef.current);
        
        while (!cardContainer && attempts < maxAttempts) {
          // Try multiple methods to find the element
          cardContainer = document.getElementById('card-container') || 
                         cardContainerRef.current || 
                         document.querySelector('#card-container') ||
                         document.querySelector('[id="card-container"]');
          
          if (!cardContainer) {
            console.log(`‚è≥ Waiting for card container... attempt ${attempts + 1}/${maxAttempts}`);
            console.log('Available elements:', {
              byId: !!document.getElementById('card-container'),
              byRef: !!cardContainerRef.current,
              byQuerySelector: !!document.querySelector('#card-container'),
              allIds: Array.from(document.querySelectorAll('[id]')).map(el => el.id)
            });
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
          }
        }
        
        if (!cardContainer) {
          console.error('‚ùå Card container element not found after waiting');
          console.log('Final debug info:', {
            documentReady: document.readyState,
            bodyChildren: document.body?.children?.length || 0,
            refCurrent: cardContainerRef.current,
            getElementById: document.getElementById('card-container'),
            querySelector: document.querySelector('#card-container')
          });
          throw new Error('Card container element not found - check if PaymentForm component is properly rendered');
        }
        
        console.log('‚úÖ Card container found:', cardContainer);
        console.log('Container details:', {
          id: (cardContainer as HTMLElement).id,
          className: (cardContainer as HTMLElement).className,
          offsetHeight: (cardContainer as HTMLElement).offsetHeight,
          offsetWidth: (cardContainer as HTMLElement).offsetWidth
        });
        
        // Clear any existing content in the container
        cardContainer.innerHTML = '';
        console.log('üßπ Card container cleared and ready');
        
        console.log('Creating card instance...');
        
        // Create card instance with styling options
        let cardInstance;
        try {
          console.log('Attempting to create card instance with styling...');
          
          const cardOptions = {
            style: {
              '.input-container': {
                borderColor: '#4b5563',
                borderWidth: '1px'
              },
              '.input-container.is-focus': {
                borderColor: '#3b82f6'
              },
              '.input-container.is-error': {
                borderColor: '#ef4444'
              },
              '.message-text': {
                color: '#ef4444'
              },
              'input': {
                color: '#f9fafb',
                fontFamily: 'Helvetica Neue',
                fontSize: '16px',
                fontWeight: 'normal'
              },
              'input::placeholder': {
                color: '#9ca3af'
              }
            }
          };
          
          // Try synchronous first
          cardInstance = payments.card(cardOptions);
          console.log('Sync card creation result:', cardInstance);
          
          // If it returns a promise, await it
          if (cardInstance && typeof cardInstance.then === 'function') {
            console.log('Card creation returned a promise, awaiting...');
            cardInstance = await cardInstance;
          }
          
          console.log('Final card instance:', cardInstance);
          console.log('Card instance type:', typeof cardInstance);
          console.log('Card instance methods:', cardInstance ? Object.keys(cardInstance) : 'null/undefined');
        } catch (cardError) {
          console.error('Error creating card instance:', cardError);
          throw new Error(`Failed to create card instance: ${cardError}`);
        }
        
        if (!cardInstance) {
          throw new Error('Card instance is null or undefined');
        }
        
        if (typeof cardInstance.attach !== 'function') {
          console.error('cardInstance.attach is not a function. Available methods:', Object.keys(cardInstance));
          throw new Error('Card instance attach method not available');
        }
        
        console.log('Attaching card instance to container...');
        
        // Attach the card form to the container using the actual element
        try {
          console.log('üîó Attempting to attach card to container...');
          
          // Try attaching with both selector and element reference
          try {
            await cardInstance.attach('#card-container');
            console.log('‚úÖ Card attached successfully with selector');
          } catch (selectorError) {
            console.log('‚ö†Ô∏è Selector attach failed, trying with element reference:', selectorError);
            // If selector fails, try with the element directly (if Square supports it)
            await cardInstance.attach(cardContainer);
            console.log('‚úÖ Card attached successfully with element reference');
          }
          
          // Add a small delay to ensure rendering is complete
          await new Promise(resolve => setTimeout(resolve, 100));
          console.log('üé® Card rendering complete');
          
        } catch (attachError) {
          console.error('‚ùå Error attaching card:', attachError);
          console.log('Container state during attach error:', {
            exists: !!cardContainer,
            id: cardContainer?.id,
            parentNode: !!cardContainer?.parentNode,
            isConnected: cardContainer?.isConnected
          });
          throw new Error(`Failed to attach card: ${attachError}`);
        }
        
        setCard(cardInstance);
        setIsSquareLoaded(true);
        console.log('‚úÖ Square payment form initialized successfully');
        
      } catch (error) {
        console.error('‚ùå Square initialization error:', error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        onError(`Payment form initialization failed: ${errorMessage}`);
      }
    };

    loadSquare();

    return () => {
      // Cleanup Square resources if needed
      const cardContainer = cardContainerRef.current;
      if (cardContainer) {
        // Square cards don't have explicit cleanup, but we can clear the container
        cardContainer.innerHTML = '';
      }
    };
  }, [onError, card]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!card) {
      onError('Payment form not initialized');
      return;
    }

    setIsLoading(true);

    try {
      // Tokenize the card
      const result = await card.tokenize();
      
      if (result.errors && result.errors.length > 0) {
        throw new Error(result.errors[0].message || 'Card tokenization failed');
      }

      if (!result.token) {
        throw new Error('Failed to tokenize card');
      }

      // Call our API to create the subscription
      const response = await fetch('/api/subscriptions/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          cardToken: result.token,
          planId: planId
        }),
      });

      const data = await response.json() as SubscriptionResult & { error?: string };

      if (!response.ok) {
        throw new Error(data.error || 'Subscription creation failed');
      }

      onSuccess(data);
    } catch (error) {
      console.error('Payment error:', error);
      onError(error instanceof Error ? error.message : 'Payment failed');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto bg-gray-900 border border-gray-700 rounded-lg p-6">
      {/* Plan Summary */}
      <div className="mb-6 p-4 bg-gray-800 rounded-lg">
        <h3 className="text-lg font-semibold text-white mb-2">{planName} Plan</h3>
        <div className="flex justify-between items-center">
          <span className="text-gray-300">Monthly subscription</span>
          <span className="text-2xl font-bold text-blue-400">{price}</span>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Card Input */}
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            <CreditCard className="inline-block w-4 h-4 mr-2" />
            Payment Information
          </label>
          <div 
            id="card-container"
            ref={cardContainerRef}
            className="min-h-[80px] bg-gray-800 border border-gray-600 rounded-md overflow-hidden p-3"
          >
            {!isSquareLoaded && (
              <div className="flex items-center justify-center h-[80px] text-gray-400 bg-gray-800">
                <div className="animate-pulse">Loading payment form...</div>
              </div>
            )}
          </div>
        </div>

        {/* Security Notice */}
        <div className="flex items-start space-x-2 text-sm text-gray-400">
          <Shield className="w-4 h-4 mt-0.5 text-green-400 flex-shrink-0" />
          <span>
            Your payment information is encrypted and secure. Powered by Square.
          </span>
        </div>

        {/* Features List */}
        <div className="space-y-2">
          <p className="text-sm font-medium text-gray-300">What&apos;s included:</p>
          <div className="space-y-1">
            {getFeaturesByPlan(planId).map((feature, index) => (
              <div key={index} className="flex items-center space-x-2 text-sm text-gray-400">
                <Check className="w-3 h-3 text-green-400 flex-shrink-0" />
                <span>{feature}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          disabled={!isSquareLoaded || isLoading}
          className={`
            w-full py-3 px-4 rounded-md font-medium transition-colors
            ${!isSquareLoaded || isLoading
              ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-700 text-white'
            }
          `}
        >
          {isLoading ? 'Processing...' : `Subscribe to ${planName} - ${price}`}
        </button>

        {/* Terms */}
        <p className="text-xs text-gray-500 text-center">
          By subscribing, you agree to our Terms of Service and Privacy Policy. 
          You can cancel anytime from your account settings.
        </p>
      </form>
    </div>
  );
}

function getFeaturesByPlan(planId: string): string[] {
  switch (planId) {
    case 'indie':
      return [
        '3 websites',
        'Advanced AEO analysis',
        'Recurring scans (daily/weekly/monthly)',
        'Detailed insights',
        'Query results visibility'
      ];
    case 'professional':
      return [
        '10 websites',
        'Premium AEO analysis',
        'Unlimited manual scans',
        'Daily recurring scans',
        'AI-powered insights',
        'Competitor tracking',
        'Priority support'
      ];
    case 'enterprise':
      return [
        'Unlimited websites',
        'Enterprise AEO analysis',
        'Custom scan frequency',
        'Advanced AI insights',
        'Expert consultation',
        'Dedicated support',
        'White-label reports',
        'API access'
      ];
    default:
      return ['Basic features'];
  }
}