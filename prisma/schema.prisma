generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
    id                Int             @id @default(autoincrement())
    email             String          @unique
    name              String?
    image             String?
    sessions          Session[]
    accounts          Account[]
    dailyUsageCount   Int             @default(0)
    lastUsageDate     DateTime?
    subscriptionTier  String          @default("free") // "free", "professional", "enterprise"
    plan              String          @default("free") // "free", "professional", "enterprise"
    // Rate limiting fields for 5-minute windows
    analyzeWebsiteCount     Int       @default(0)  // Count of analyze website button uses
    analyzeWebsiteResetTime DateTime? // When the 5-minute window resets
    generatePromptsCount    Int       @default(0)  // Count of generate prompts button uses  
    generatePromptsResetTime DateTime? // When the 5-minute window resets
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    aeoScores         AeoScore[]
    inputHistory      InputHistory[]
    rankingHistory    RankingHistory[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AeoScore {
  id          Int      @id @default(autoincrement())
  userId      Int
  date        DateTime @default(now()) @db.Date
  score       Int      // Overall AEO score (0-100)
  businessName String
  keywords    String[] // JSON array of keywords used
  visibility  Int      // Visibility percentage
  ranking     Int      // Average ranking score
  relevance   Int      // Relevance score
  accuracy    Int      // Accuracy score
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date, businessName])
  @@index([userId, date])
}

// Input History - stores business information and prompts used
model InputHistory {
  id                  Int       @id @default(autoincrement())
  userId              Int
  runUuid             String?   @unique // UUID linking this input to its ranking results
  businessName        String
  industry            String
  location            String?
  websiteUrl          String?   // If present, indicates website analysis was used
  businessDescription String    @db.Text
  keywords            String[]  // Array of keywords
  prompts             String[]  // Array of prompts used
  createdAt           DateTime  @default(now())
  
  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([businessName])
  @@index([runUuid])
}

// Ranking History - stores search engine ranks and website analysis scores
model RankingHistory {
  id                Int       @id @default(autoincrement())
  userId            Int
  runUuid           String?   @unique // UUID linking this result to its input
  businessName      String
  
  // Search Engine Rankings (AEO scores across providers)
  openaiRank        Int?      // OpenAI ranking/score
  claudeRank        Int?      // Claude ranking/score  
  perplexityRank    Int?      // Perplexity ranking/score
  averageRank       Int?      // Average across all providers
  
  // Website Analysis Score (if website was analyzed)
  websiteScore      Int?      // Website analysis score (0-100)
  hasWebsiteAnalysis Boolean  @default(false)
  
  createdAt         DateTime  @default(now())
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([businessName])
  @@index([runUuid])
}